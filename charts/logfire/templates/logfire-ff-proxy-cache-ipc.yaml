{{- $serviceName := "logfire-ff-proxy-cache-ipc" }}
---
apiVersion: v1
kind: Service
metadata:
  name: logfire-ff-cache-ipc
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  annotations:
    {{- include "logfire.serviceAnnotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 4 }}
spec:
  selector:
    {{- include "logfire.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  ports:
  - port: 9001
    targetPort: 8080
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  annotations:
    {{- include "logfire.annotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 4 }}
spec:
  {{- if not (hasKey (index .Values $serviceName | default dict) "autoscaling") }}
  replicas: {{ dig "replicas" "1" (index .Values $serviceName | default dict) }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "logfire.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $serviceName }}
  template:
    metadata:
      labels:
        {{- include "logfire.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $serviceName }}
      annotations:
        checksum/logfire-cache-ipc-haproxy-config: {{ include "utils.secretChecksum" (dict "ctx" . "name" "logfire-cache-ipc-haproxy-config" "key" "haproxy.cfg") }}
        checksum/service-config: {{ include (print $.Template.BasePath "/logfire-service-config.yaml") . | sha256sum }}
        {{- include "logfire.podAnnotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 8 }}
    spec:
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . | quote }}
      {{- end }}
      {{- end }}
      {{- with (index .Values $serviceName | default dict).initContainers }}
      initContainers:
        {{- . | toYaml | nindent 8 }}
      {{- end}}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $serviceName }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: haproxy:3.2
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          volumeMounts:
            - name: logfire-cache-ipc-haproxy-config
              mountPath: /usr/local/etc/haproxy/haproxy.cfg
              subPath: haproxy.cfg
              readOnly: true
          lifecycle:
            preStop:
              exec:
                command:
                  - "sleep"
                  - "5"
          ports:
            - containerPort: 8080
            - containerPort: 8181 # Stats port
          {{- include "logfire.resources" (dict "Values" .Values "serviceName" $serviceName) | nindent 10 }}
          env:
            - name: OTEL_SERVICE_NAME
              value: {{ $serviceName }}
            {{ if eq (.Values.ingress.tls | default false) false }}
            - name: E2E
              value: "true"
            {{ end }}
            {{- with (index .Values $serviceName | default dict).env }}
              {{- . | toYaml | nindent 12 }}
            {{- end}}
          livenessProbe:
            httpGet:
              path: "/stats"
              port: 8181
          startupProbe:
            httpGet:
              path: "/stats"
              port: 8181
          readinessProbe:
            httpGet:
              path: "/stats"
              port: 8181
      volumes:
        - name: logfire-cache-ipc-haproxy-config
          secret:
            secretName: logfire-cache-ipc-haproxy-config
            items:
              - key: haproxy.cfg
                path: haproxy.cfg

{{- template "logfire.autoscaler" (dict "Values" .Values "serviceName" $serviceName) }}
{{- template "logfire.pdb" (dict "root" $ "serviceName" $serviceName) }}
