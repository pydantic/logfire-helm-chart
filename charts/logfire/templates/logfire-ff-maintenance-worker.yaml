{{- $serviceName := "logfire-ff-maintenance-worker" }}
{{- $defaultCpu := "1" -}}
{{- $serviceValues := get .Values $serviceName | default dict -}}
{{- $resources := get $serviceValues "resources" | default dict -}}
{{- $cpu := get $resources "cpu" | default $defaultCpu -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  annotations:
    {{- include "logfire.postgresSecret.annotations" . | nindent 4 }}
    {{- include "logfire.annotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 4 }}
spec:
  {{- if not (hasKey (index .Values $serviceName | default dict) "autoscaling") }}
  replicas: {{ dig "replicas" "1" (index .Values $serviceName | default dict) }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "logfire.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $serviceName }}
  template:
    metadata:
      labels:
        {{- include "logfire.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $serviceName }}
      annotations:
        checksum/ff-config: {{ include (print $.Template.BasePath "/logfire-ff-config.yaml") . | sha256sum }}
        {{- if or (not .Values.postgresSecret.enabled) (empty .Values.postgresSecret.annotations) }}
        checksum/logfire-postgres-ff-dsn: {{ include "utils.secretChecksum" (dict "ctx" . "name" (include "logfire.postgresSecretName" .) "key" "postgresFFDsn" )}}
        {{- end }}
        {{- include "logfire.podAnnotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 8 }}
    spec:
      priorityClassName: {{ .Values.priorityClassName }}
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . | quote }}
      {{- end }}
      {{- end }}
      {{- with (index .Values $serviceName | default dict).initContainers }}
      initContainers:
        {{- . | toYaml | nindent 8 }}
      {{- end}}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $serviceName }}
          image: '{{ .Values.image.repository | default "" }}{{ .Values.image.fusionfireImage }}:{{ include "logfire.defaultTag" .  }}'
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
{{- include "logfire.resources" (dict "Values" .Values "serviceName" $serviceName) | indent 10 }}
          command:
            - fusionfire
            - maintenance-worker
            - --host=0.0.0.0
            - --port=8013
          ports:
            - containerPort: 8013
          envFrom:
            - configMapRef:
                name: logfire-ff-config
          env:
            - name: FF_CACHE_OBJECT_STORE_HTTP_HEADERS
              value: x-ff-no-warm-cache=1
            - name: FF_ENABLE_SPILL_TO_DISK
              value: "true"
            - name: FF_ENABLE_INDEX_COMPACTION
              value: "false"
            - name: FF_ENABLE_HISTORICAL_COMPACTION
              value: "false"
            - name: FF_ENABLE_HISTORICAL_INDEX_COMPACTION
              value: "false"
            - name: FF_ENABLE_SCHEMA_UPGRADES
              value: "true"
            - name: FF_UPGRADE_MAX_DAYS
              value: "90"
            - name: FF_TEMP_DIR
              value: /scratch/fusionfire
            {{- include "logfire.otlpExporterEnv" $serviceName | nindent 12 }}
            - name: FF_DATAFUSION_MEMORY_LIMIT
              value: {{ (get (get .Values $serviceName | default dict) "datafusionMemory" | default "512MB" | quote) }}
            - name: FF_DATAFUSION_THREADS
              {{- $dataFusionThreads := sub (atoi $cpu) 1 }}
              value: {{ (gt $dataFusionThreads 0) | ternary $dataFusionThreads "1" | quote }}
            - name: PG_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.postgresSecretName" . }}
                  key: postgresFFDsn
            - name: FF_COMPACTION_DOWNLOAD_PARALLELISM
              value: {{ (get (get .Values $serviceName | default dict) "downloadParallelism" | default "1" | quote) }} 
            - name: FF_COMPACTION_JOB_PARALLELISM
              value: {{ (get (get .Values $serviceName | default dict) "jobParallelism" | default "1" | quote) }} 
            - name: FF_COMPACTION_MAX_DAYS
              value: "3"
            - name: FF_COMPACTION_LOOP_BACKOFF_DELAY
              value: "1s"
            - name: FF_DELETION_LOOP_DELAY
              value: "30s"
            - name: FF_COMPACTION_GATHER_DELAY
              value: "1s"
            - name: FF_MAX_FILES_PER_COMPACTION_JOB
              value: "10000"
            - name: FF_IO_THREADS
              value: {{ $cpu | quote }}
            {{- include "logfire.ffmaxRowPerRowGroup" . | nindent 12 -}}
            {{- include "logfire.ffCompactionTiers" . | nindent 12 -}}
            {{- include "logfire.objectStoreEnv" . | nindent 12 -}}
            {{- with (index .Values $serviceName | default dict).env }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: {{ include "logfire.scratchVolumeName" . }}
              mountPath: /scratch
          livenessProbe:
            httpGet:
              path: /health
              port: 8013
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8013
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
      volumes:
      {{- include "logfire.scratchVolume" (get (get .Values $serviceName | default dict) "scratchVolume" | default dict) | nindent 6 }}
{{- template "logfire.hpa" (dict "Values" .Values "serviceName" $serviceName) }}
{{- template "logfire.pdb" (dict "root" $ "serviceName" $serviceName) }}
