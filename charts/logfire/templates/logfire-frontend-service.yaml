{{- $serviceName := "logfire-frontend-service" }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  annotations:
    {{- include "logfire.serviceAnnotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 4 }}
spec:
  selector:
    {{- include "logfire.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  annotations:
    {{- include "logfire.annotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 4 }}
spec:
  replicas: {{ dig "replicas" "1" (index .Values $serviceName | default dict) }}
  selector:
    matchLabels:
      {{- include "logfire.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $serviceName }}
  template:
    metadata:
      labels:
        {{- include "logfire.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $serviceName }}
      annotations:
        checksum/service-config: {{ include (print $.Template.BasePath "/logfire-frontend-service-config.yaml") . | sha256sum }}
        {{- include "logfire.podAnnotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 8 }}
    spec:
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . | quote }}
      {{- end }}
      {{- end }}
      {{- with (index .Values $serviceName | default dict).initContainers }}
      initContainers:
        {{- . | toYaml | nindent 8 }}
      {{- end}}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- include "logfire.nodeSelector" (dict "Values" .Values "serviceName" $serviceName) | nindent 6}}
      {{- include "logfire.affinity" (dict "Values" .Values "serviceName" $serviceName) | nindent 6}}
      {{- include "logfire.tolerations" (dict "Values" .Values "serviceName" $serviceName) | nindent 6}}
      containers:
        - name: {{ $serviceName }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: '{{ .Values.image.repository | default "" }}{{ .Values.image.frontendImage }}:{{ include "logfire.defaultTag" .  }}'
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command: ["nginx", "-c", "/usr/local/nginx/nginx.conf"]
          volumeMounts:
            - name: logfire-frontend-nginx-config
              mountPath: /usr/local/nginx
            - name: logfire-frontend-service-config
              mountPath: /opt/nginx
            - name: tmp
              mountPath: /tmp
          ports:
            - containerPort: 8080
          {{- include "logfire.resources" (dict "Values" .Values "serviceName" $serviceName) | nindent 10 }}
          env:
            - name: STRIPE_PUBLISHABLE_KEY
              value: ""
            - name: IMAGE_TAG
              value: local
            - name: POSTHOG_API_KEY
              value: ""
            - name: POSTHOG_API_HOST
              value: ""
            - name: OTEL_SERVICE_NAME
              value: {{ $serviceName }}
            {{ if eq (.Values.ingress.tls | default false) false }}
            - name: E2E
              value: "true"
            {{ end }}
            {{- with (index .Values $serviceName | default dict).env }}
              {{- . | toYaml | nindent 12 }}
            {{- end}}
      volumes:
        - name: logfire-frontend-nginx-config
          configMap:
            name: logfire-frontend-nginx-config
        - name: logfire-frontend-service-config
          configMap:
            name: logfire-frontend-service-config
        - name: tmp
          emptyDir: {}
{{- template "logfire.autoscaler" (dict "Values" .Values "serviceName" $serviceName) }}
{{- template "logfire.pdb" (dict "root" $ "serviceName" $serviceName) }}
