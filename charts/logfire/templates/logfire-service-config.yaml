apiVersion: v1
kind: Secret
metadata:
  name: logfire-haproxy-config
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: logfire-haproxy-config
stringData:
  haproxy.cfg: |
    global
      daemon
      maxconn 10000
      log stdout sample 1:1000 local0 info

    defaults
      mode http
      option forwardfor
      timeout connect 5000ms
      timeout client 3600s #30000ms
      timeout server 3600s #30000ms

    listen stats
      bind :8181
      mode http
      stats enable
      stats uri /stats
      stats show-modules

    resolvers kubernetes
      parse-resolv-conf
      accepted_payload_size 8192
      resolve_retries 10
      timeout retry 2s
      hold valid 5s

    frontend http-in
      bind :8080 alpn h2,http/1.1

      http-request set-header Host %[req.hdr(Host)]
      http-request set-header X-Real-IP %[src]

      # Handle WebSocket upgrade headers
      acl is_websocket hdr(Upgrade) -i WebSocket
      http-request set-header Connection Upgrade if is_websocket

      acl is_options method OPTIONS
      acl cors_path_ingest path_reg -i ^/v1/(traces|metrics|logs)$
      acl cors_path_api path_reg -i ^/(api|v1)/
      # Respond to preflight requests directly from HAProxy
      http-request return status 204 if is_options cors_path_ingest or is_options cors_path_api
      http-request set-header Access-Control-Allow-Origin "{{ include "logfire.url" . }}" if is_options cors_path_ingest or is_options cors_path_api
      http-request set-header Access-Control-Allow-Credentials "true" if is_options cors_path_ingest or is_options  cors_path_api
      http-request set-header Access-Control-Allow-Methods "*" if is_options cors_path_ingest or is_options cors_path_api
      http-request set-header Access-Control-Allow-Headers "Authorization,Content-type,X-Logfire-Context" if is_options cors_path_ingest or is_options cors_path_api
      http-request set-header Access-Control-Max-Age "1728000" if is_options cors_path_ingest or is_options cors_path_api
      
      
      acl path_ingest path_reg -i ^/v1/(traces|metrics|logs)$
      acl path_dex path_beg /auth-api
      acl path_backend path_reg -i ^/(api|v1)/

      log stdout local0 info
      option httplog
      option http-keep-alive
      no option httpclose
      timeout http-keep-alive 60s
      timeout client 80s

      use_backend logfire-ingest if path_ingest
      use_backend logfire-dex if path_dex
      use_backend logfire-backend if path_backend

      default_backend logfire-frontend

    backend logfire-ingest
      # Create hash from authorization header, path, and query params
      http-request set-var-fmt(txn.auth_hash) "%[req.hdr(authorization)]"
      http-request set-var-fmt(txn.path_hash) "%[path]"
      http-request set-var-fmt(txn.query_hash) "%[query]"
      http-request set-var-fmt(txn.hash) "%[var(txn.auth_hash)] %[var(txn.path_hash)] %[var(txn.query_hash)]"

      # Use consistent hashing with the combined hash
      balance hash var(txn.hash)
      hash-type consistent
      # Use a hash balance factor to control the distribution of requests and avoid overloading a single pod if a hot hash keeps hitting the same pod
      hash-balance-factor 150
      # Enable both TCP and HTTP checks
      option httpchk GET /health
      http-check expect status 200
      option tcp-check
      option http-server-close
      timeout connect 3s
      timeout server 50s
      # Retry a total of 4 times, move to a different server every 2 retries
      retries 4
      option redispatch 2

      {{- if .Values.legacyIngest.enabled }}
      server logfire-ff-ingest-api logfire-ff-ingest-api.{{ .Release.Namespace }}.svc.cluster.local.:8012 check resolvers kubernetes hash-key addr
      {{- end }}
      server-template logfire-ff-ingest 1-{{ default 1 (get (get .Values "logfire-ff-ingest" | default dict) "autoscaling.maxReplicas") }} logfire-ff-ingest.{{ .Release.Namespace }}.svc.cluster.local.:8012 check resolvers kubernetes inter 250ms hash-key addr

    backend logfire-dex
      balance roundrobin
      # Health checks
      option httpchk GET /healthz
      option http-server-close
      timeout connect 3s
      timeout server 50s
      http-check expect status 200

      server logfire-dex logfire-dex.{{ .Release.Namespace }}.svc.cluster.local.:5556 check port 5558 resolvers kubernetes

    backend logfire-backend
      balance roundrobin
      # Health checks
      option httpchk GET /health
      option http-server-close
      timeout connect 3s
      timeout server 50s
      http-check expect status 200

      server logfire-backend logfire-backend.{{ .Release.Namespace }}.svc.cluster.local.:8000 check resolvers kubernetes

    backend logfire-frontend
      balance roundrobin
      # Health checks
      option httpchk GET /health
      option http-server-close
      timeout connect 3s
      timeout server 50s
      http-check expect status 200
      server logfire-frontend logfire-frontend-service.{{ .Release.Namespace }}.svc.cluster.local.:8080 check resolvers kubernetes
