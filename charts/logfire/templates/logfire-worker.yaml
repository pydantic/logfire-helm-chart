{{- $serviceName := "logfire-worker" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  annotations:
    {{- include "logfire.postgresSecret.annotations" . | nindent 4 }}
    {{- include "logfire.annotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 4 }}
spec:
  {{- if not (hasKey (index .Values $serviceName | default dict) "autoscaling") }}
  replicas: {{ dig "replicas" "1" (index .Values $serviceName | default dict) }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "logfire.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $serviceName }}
  template:
    metadata:
      annotations:
        {{- if or (not .Values.postgresSecret.enabled) (empty .Values.postgresSecret.annotations) }}
        checksum/logfire-postgres-dsn: {{ include "utils.secretChecksum" (dict "ctx" . "name" (include "logfire.postgresSecretName" .) "key" "postgresDsn" )}}
        {{- end }}
        {{- include "logfire.podAnnotations" (dict "Values" .Values "serviceName" $serviceName) | nindent 8 }}
      labels:
        {{- include "logfire.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $serviceName }}
    spec:
      priorityClassName: {{ .Values.priorityClassName }}
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . | quote }}
      {{- end }}
      {{- end }}
      {{- with (index .Values $serviceName | default dict).initContainers }}
      initContainers:
        {{- . | toYaml | nindent 8 }}
      {{- end}}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $serviceName }}
          image: '{{ .Values.image.repository | default "" }}{{ .Values.image.workerImage }}:{{ include "logfire.defaultTag" .  }}'
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          {{- include "logfire.resources" (dict "Values" .Values "serviceName" $serviceName) | nindent 10 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          command: [ "python", "-m", "logfire_worker" ]
          ports:
            - containerPort: 8003
          livenessProbe:
            httpGet:
              path: /health
              port: 8003
          startupProbe:
            httpGet:
              path: /health
              port: 8003
          env:
            - name: LOGFIRE_SERVICE_NAME
              value: {{ $serviceName }}
            - name: LOGFIRE_SERVICE_VERSION
              value: .Values.appVersion
            - name: CRUD_PG_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.postgresSecretName" . }}
                  key: postgresDsn
            - name: SHARED_REDIS_DSN
              value: {{ .Values.redisDsn }}
            - name: REDIS_DSN
              value: {{ .Values.redisDsn }}
            - name: USAGE_REDIS_DSN
              value: {{ .Values.usageRedisDsn }}
            - name: OTEL_TRACES_SAMPLER
              value: parentbased_traceidratio
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "0.05"
            - name: FUSIONFIRE_HOST
              value: http://logfire-ff-query-api
            - name: FUSIONFIRE_PORT
              value: "8011"
            - name: FUSIONFIRE_INGEST_HOST
              value: http://logfire-ff-ingest
            - name: FUSIONFIRE_INGEST_PORT
              value: "8012"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: vcs.repository.url.full=https://github.com/pydantic/platform,vcs.repository.ref.revision=main,logfire.code.work_dir=/app
            - name: COLLECTOR_OTLP_GRPC_HOST
              value: http://logfire-otel-collector:4317
            - name: FRONTEND_HOST
              value: {{ include "logfire.url" . | quote }}
            - name: USAGE_TO_BUCKET_BUCKET_NAME
              value: {{ .Values.usageObjectStoreUri }}/usage
            {{ if .Values.dev.deployMaildev }}
            - name: SMTP_SERVER
              value: logfire-maildev
            - name: SMTP_PORT
              value: "1025"
            - name: SMTP_USERNAME
              value: maildev
            - name: SMTP_PASSWORD
              value: maildev
            - name: SMTP_USE_TLS
              value: "false"
            {{ else }}
            - name: SMTP_SERVER
              value: {{ .Values.smtp.host }}
            - name: SMTP_PORT
              value: {{ .Values.smtp.port | quote }}
            - name: SMTP_USERNAME
              value: {{ .Values.smtp.username }}
            - name: SMTP_PASSWORD
              value: {{ .Values.smtp.password }}
            - name: SMTP_USE_TLS
              value: {{ .Values.smtp.use_tls | quote }}
            {{ end }}
            {{- with (index .Values $serviceName | default dict).env }}
              {{- . | toYaml | nindent 12 }}
            {{- end}}
{{- template "logfire.autoscaler" (dict "Values" .Values "serviceName" $serviceName) }}
{{- template "logfire.pdb" (dict "root" $ "serviceName" $serviceName) }}
