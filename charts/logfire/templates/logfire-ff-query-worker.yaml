{{- $serviceName := "logfire-ff-query-worker" }}
{{- if (index .Values $serviceName | default dict).enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
spec:
  {{- if not (hasKey (index .Values $serviceName | default dict) "autoscaling") }}
  replicas: {{ dig "replicas" "1" (index .Values $serviceName | default dict) }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "logfire.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $serviceName }}
  template:
    metadata:
      labels:
        {{- include "logfire.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $serviceName }}
      annotations:
        checksum/ff-config: {{ include (print $.Template.BasePath "/logfire-ff-config.yaml") . | sha256sum }}
    spec:
      priorityClassName: {{ .Values.priorityClassName }}
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . | quote }}
      {{- end }}
      {{- end }}
      {{- with (index .Values $serviceName | default dict).initContainers }}
      initContainers:
        {{- . | toYaml | nindent 8 }}
      {{- end}}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $serviceName }}
          image: '{{ .Values.image.repository | default "" }}{{ .Values.image.fusionfireImage }}:{{ include "logfire.defaultTag" .  }}'
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- include "logfire.resources" (dict "Values" .Values "serviceName" $serviceName) | nindent 10 }}
          command:
            - fusionfire
            - query-worker
            - --host=0.0.0.0
            - --port=8011
          ports:
            - containerPort: 8011
          envFrom:
            - configMapRef:
                name: logfire-ff-config
          env:
            - name: OTEL_SERVICE_NAME
              value: {{ $serviceName }}
            - name: FF_ENABLE_SPILL_TO_DISK
              value: "true"
            - name: FF_TEMP_DIR
              value: /scratch/fusionfire
            - name: PG_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.postgresSecretName" . }}
                  key: postgresFFDsn
            - name: FF_INGEST_PG_DSN_1
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.postgresSecretName" . }}
                  key: postgresIngestDsn
            {{- include "logfire.objectStoreEnv" . | nindent 12 -}}
            {{- with (index .Values $serviceName | default dict).env }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: scratch
              mountPath: /scratch
          livenessProbe:
            httpGet:
              path: /health
              port: 8011
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8011
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
      volumes:
      - name: scratch
        emptyDir: {}
{{- template "logfire.hpa" (dict "Values" .Values "serviceName" $serviceName) }}
{{- template "logfire.pdb" (dict "root" $ "serviceName" $serviceName) }}
{{- end }}
