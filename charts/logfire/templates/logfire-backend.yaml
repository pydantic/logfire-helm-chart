{{- $serviceName := "logfire-backend" }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
spec:
  selector:
    {{- include "logfire.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    {{- include "logfire.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
spec:
  {{- if not (hasKey (index .Values $serviceName | default dict) "autoscaling") }}
  replicas: {{ dig "replicas" "1" (index .Values $serviceName | default dict) }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "logfire.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $serviceName }}
  template:
    metadata:
      labels:
        {{- include "logfire.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $serviceName }}
    spec:
      priorityClassName: {{ .Values.priorityClassName }}
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . | quote }}
      {{- end }}
      {{- end }}
      {{- with (index .Values $serviceName | default dict).initContainers }}
      initContainers:
        {{- . | toYaml | nindent 8 }}
      {{- end}}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $serviceName }}
          image: '{{ .Values.image.repository | default "" }}{{ .Values.image.backendImage }}:{{ include "logfire.defaultTag" .  }}'
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- include "logfire.resources" (dict "Values" .Values "serviceName" $serviceName) | nindent 10 }}
          command: ["python", "-m", "logfire_backend"]
          ports:
            - containerPort: 8000
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
          env:
            - name: APP_PORT
              value: "8000"
            - name: CRUD_PG_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.postgresSecretName" . }}
                  key: postgresDsn
            - name: SHARED_REDIS_DSN
              value: {{ .Values.redisDsn }}
            - name: REDIS_DSN
              value: {{ .Values.redisDsn }}
            - name: WORKER_REDIS_DSN
              value: {{ .Values.redisDsn }}
            - name: USAGE_REDIS_DSN
              value: {{ .Values.redisDsn }}
            - name: DEX_INTERNAL_URL
              value: http://logfire-dex:5556
            {{- with .Values.ai }}
            {{- with .model }}
            - name: AI_MODEL
              value: {{ . }}
            {{- end }}
            {{- with .openAi.apyKey }}
            - name: OPENAI_API_KEY
              value: {{ . }}
            {{- end }}
            {{- with .vertexAi.region }}
            - name: VERTEX_AI_REGION
              value: {{ . }}
            {{- end }}
            {{- with .azureOpenAi }}
            {{- with .endpoint}}
            - name: AZURE_OPENAI_ENDPOINT
              value: {{ . }}
            {{- end }}
            {{- with .apiKey}}
            - name: AZURE_OPENAI_API_KEY
              value: {{ . }}
            {{- end }}
            {{- with .apiVersion}}
            - name: OPENAI_API_VERSION
              value: {{ . }}
            {{- end }}
            {{- end }}
            {{- end }}
            - name: DEX_CLIENT_ID
              value: {{ include "logfire.dexClientId" . }}
            - name: DEX_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.secretName" (dict "secretName" "logfire-dex-client-secret" "existingSecret" (get .Values "existingSecret" | default dict)) }}
                  key: logfire-dex-client-secret
            - name: ON_PREM
              value: "true"
            - name: FUSIONFIRE_HOST
              value: http://logfire-ff-query-api
            - name: BROWSER_TELEMETRY_COLLECTOR_OTLP_HTTP_HOST
              value: http://logfire-otel-collector:4318
            - name: COLLECTOR_OTLP_GRPC_HOST
              value: http://logfire-otel-collector:4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: vcs.repository.url.full=https://github.com/pydantic/platform,vcs.repository.ref.revision={{ .Chart.AppVersion | default "main" | quote }},logfire.code.work_dir=/app
            - name: LOGFIRE_SERVICE_NAME
              value: {{ $serviceName }}
            - name: LOGFIRE_SERVICE_VERSION
              value: {{ .Values.appVersion }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.secretName" (dict "secretName" "logfire-jwt-secret" "existingSecret" (get .Values "existingSecret" | default dict)) }}
                  key: logfire-jwt-secret
            - name: FUSIONFIRE_PORT
              value: "8011"
            - name: MIN_DATE_USAGE_CHART  # TODO: make this optional?
              value: "2025-01-01"
            - name: DEFAULT_SUBSCRIPTION_PLAN
              value: non_stripe
            - name: LOGFIRE_REGION
              value: {{ .Values.logfireRegion | default "local" }}
            - name: KNOWN_LOGFIRE_REGIONS
              value: '[{"name": "local", "frontend_host": "{{ include "logfire.url" . }}", "api_host": "{{ include "logfire.url" . }}", "auth_host": "{{ include "logfire.url" . }}"}]'
            - name: FRONTEND_HOST
              value: {{ include "logfire.url" . | quote }}
            - name: META_WRITE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.secretName" (dict "secretName" "logfire-meta-write-token" "existingSecret" (get .Values "existingSecret" | default dict)) }}
                  key: logfire-meta-write-token
            - name: META_FRONTEND_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "logfire.secretName" (dict "secretName" "logfire-meta-frontend-token" "existingSecret" (get .Values "existingSecret" | default dict)) }}
                  key: logfire-meta-frontend-token
            - name: BOOTSTRAPPED_ORGANIZATIONS
              # This will make it possible to log-in sans-credentials by visiting a URL like:
              # http://localhost:8080/logfire-meta/logfire-meta#token=U8TO1taNdD7YwgBMcfeQVU7RB6Hgtrwd
              # You'll need to get the right host and get the secret from k8s
              value: '[{"admin_user_email": "{{ .Values.adminEmail }}", "organization_name": "logfire-meta", "projects": [{"project_name": "logfire-meta", "write_token": "$(META_WRITE_TOKEN)", "permanent_frontend_token": "$(META_FRONTEND_TOKEN)"}]}]'
            {{- with (index .Values $serviceName | default dict).env }}
              {{- . | toYaml | nindent 12 }}
            {{- end}}
{{- template "logfire.hpa" (dict "Values" .Values "serviceName" $serviceName) }}
{{- template "logfire.pdb" (dict "root" $ "serviceName" $serviceName) }}
